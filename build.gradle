buildscript {
    ext {
        repos = {
            gradlePluginPortal()
            mavenLocal()
            mavenCentral()
        }
        groovyAllVersion = '2.4.13'
        spockVersion = '1.1-groovy-2.4'
        coverallsVersion = '2.8.2'
        lombokVersion = '1.16.18'
        jacksonVersion = '2.9.8'
        byteBuddyVersion = '1.9.12'
        jsonPathAssertVersion = '2.2.0'
        objenesisVersion = '3.0.1'
        guavaVersion = '27.1-jre'
        reflectionsVersion = '0.9.11'
        axionReleasePluginVersion = '1.10.0'
        nexusStagingPluginVersion = '0.20.0'
        nexusPublishPluginVersion = '0.2.0'
        sonarqubePluginVersion = '2.7'
    }
    repositories (repos)
    dependencies {
        classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:$coverallsVersion"
        classpath "pl.allegro.tech.build:axion-release-plugin:$axionReleasePluginVersion"
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:$nexusStagingPluginVersion"
        classpath "de.marcphilipp.gradle:nexus-publish-plugin:$nexusPublishPluginVersion"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:$sonarqubePluginVersion"
    }
}

apply plugin: 'io.codearte.nexus-staging'
apply plugin: 'pl.allegro.tech.build.axion-release'

scmVersion {
    tag {
        prefix = 'vaunt-release'
    }
}

nexusStaging {
    packageGroup project.group
    username System.getenv('SONATYPE_USER')
    password System.getenv('SONATYPE_PASSWORD')
    stagingProfileId = '8932a92dff8c84'
    numberOfRetries = 5
    delayBetweenRetriesInMillis = 60000
}

allprojects {
    repositories (repos)

    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'
    apply plugin: 'com.github.kt3k.coveralls'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'org.sonarqube'
    apply plugin: 'de.marcphilipp.nexus-publish'

    group = 'com.hltech'
    version = scmVersion.version

    jacoco {
        toolVersion = "0.8.1"
    }

    checkstyle {
        toolVersion "8.1"
    }

    javadoc {
        failOnError false
    }

    task javadocJar(type: Jar) {
        from javadoc
        archiveClassifier = 'javadoc'
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        archiveClassifier = 'sources'
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from(components.java)
                artifact sourcesJar
                artifact javadocJar
                pom {
                    version = project.version
                    artifactId  = project.name
                    name = project.name
                    groupId = project.group
                    packaging = 'jar'

                    description = 'Toolkit to define and validate contracts in JMS'
                    url = 'https://github.com/HLTech/vaunt'
                    inceptionYear = '2019'

                    scm {
                        connection = 'scm:git:https://github.com/HLTech/vaunt.git'
                        developerConnection = 'scm:git:git@github.com:HLTech/vaunt.git'
                        url = 'https://github.com/HLTech/vaunt.git'
                    }

                    licenses {
                        license {
                            name = 'The MIT License'
                            url = 'https://opensource.org/licenses/MIT'
                        }
                    }

                    developers {
                        developer {
                            id = 'Felipe444'
                            name = 'Filip Łazarski'
                            email = 'filip.lazarski@hl.co.uk'
                        }
                        developer {
                            id = 'matek2305'
                            name = 'Mateusz Urbański'
                            email = 'mateusz.urbanski@hl.co.uk'
                        }
                    }
                }
            }
        }
    }

    if (project.hasProperty("signing.keyId")) {
        signing {
            sign publishing.publications.mavenJava
        }
    }

    sourceSets {
        test.groovy.srcDirs(
                "src/test/groovy"
        )
    }
}

subprojects {
    dependencies {
        compile "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
        compile "com.fasterxml.jackson.module:jackson-module-jsonSchema:$jacksonVersion"

        compileOnly "org.projectlombok:lombok:$lombokVersion"
        annotationProcessor "org.projectlombok:lombok:$lombokVersion"
        testCompileOnly "org.projectlombok:lombok:$lombokVersion"
        testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"

        testCompile "org.spockframework:spock-core:$spockVersion"
        testCompile "org.codehaus.groovy:groovy-all:$groovyAllVersion"
        testRuntimeOnly "net.bytebuddy:byte-buddy:$byteBuddyVersion"
        testRuntimeOnly "org.objenesis:objenesis:$objenesisVersion"
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }
}

project(":vaunt-core") {
    dependencies {
        compile "com.google.guava:guava:$guavaVersion"
    }
}

project(":vaunt-generator") {
    dependencies {
        compile project(':vaunt-core')

        compile "org.reflections:reflections:$reflectionsVersion"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-guava:$jacksonVersion"

        testCompile "com.jayway.jsonpath:json-path-assert:$jsonPathAssertVersion"
    }
}

project(":vaunt-validator") {
    dependencies {
        compile project(':vaunt-core')

        compile "com.google.guava:guava:$guavaVersion"
    }
}

coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

task jacocoRootReport(type: JacocoReport) {
    def testableSubprojects = subprojects.findAll {it.name != 'vaunt-core'}

    dependsOn = testableSubprojects.test

    additionalSourceDirs.from = files(testableSubprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.from = files(testableSubprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.from =  files(testableSubprojects.sourceSets.main.output)
    executionData.from = files(testableSubprojects.jacocoTestReport.executionData)
    
    reports {
        xml.enabled = true
        html.enabled = true
    }
}